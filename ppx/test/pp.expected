let makeProps
  : ?name:'name ->
      ?key:string ->
        unit ->
          < name: 'name option Js_of_ocaml.Js.readonly_prop   > 
            Js_of_ocaml.Js.t
  =
  fun ?name ->
    fun ?key ->
      fun _ ->
        let open Js_of_ocaml.Js.Unsafe in
          obj [|("key", (inject key));("name", (inject name))|]
let make =
  let Test
    (Props :
      < name: 'name option Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t)
    =
    let name =
      match fun (type res) -> fun (type t0) ->
              fun (t0 : t0 Js_of_ocaml.Js.t) ->
                fun (_ : t0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                  -> (Js_of_ocaml.Js.Unsafe.get t0 "name" : res)
              (Props : < .. >  Js_of_ocaml.Js.t)
              (fun ((x)[@merlin.loc ]) -> ((x#name)[@merlin.loc ]))
      with
      | Some name -> name
      | None -> "" in
    ReactDOM.createElement ReasonReact.fragment
      [|(ReactDOM.createDOMElementVariadic "div"
           [|(React.string ("Hello " ^ name))|]);(React.createElement
                                                    Hello.make
                                                    (Hello.makeProps ~one:"1"
                                                       ~children:(React.string
                                                                    (
                                                                    "Hello "
                                                                    ^ name))
                                                       ()))|] in
  Test
